using System;
using System.Text;
using System.Collections.Generic;
using UnityEngine;

namespace RomeroGames
{
    public class BRTranspiler : BRScript.IVisitor
    {
        private const string Header = "-- Autogenerated File - please do not edit\n";
        private String _output;
        private BRParser _parser;
        private BRScanner _scanner;
        private StringBuilder _sb;
        private StringBuilder _handleResultsSB;
        private StringBuilder _curSB;
        private StringBuilder _textSB;
        private bool _debug = false;
        private string _scriptId;
        private string _scriptType;
        private string _scriptPrefix;
        private string _blockName;
        private string _resultsBlockName;
        private BlockOptions _blockOptions;
        private BlockSay _blockSay;
        private StringWithVariables _varString;
        private List<string> _scriptVariables;
        private int _curIndentLevel;

        public class BlockSay
        {
            public BRScript.SayStatement say;
            public BRScript.ControlSayStatement modifier;
            public void Clear()
            {
                say = null;
                modifier = null;
            }
        }

        public class BlockOptions
        {
            public void Clear()
            {
                hasTimeOut = false;
                options.Clear();
            }

            public BlockOption GetBlockOption(int option)
            {
                foreach(BlockOption bo in options)
                {
                    if (bo.id == option)
                    {
                        return bo;
                    }
                }
                return null;
            }

            public double timeOut;
            public bool hasTimeOut;
            public List<BlockOption> options = new List<BlockOption>();
        }

        public class BlockOption
        {
            public int id;
            public string text;
            public List<BRScript.ControlOptionStatement> modifiers;

            public BRScript.ControlOptionStatement GetHideModifier()
            {
                if (modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in modifiers)
                    {
                        if (modifier.token.type == BRScanner.TokenType.HIDE_OPTION)
                        {
                            return modifier;
                        }
                    }
                }
                return null;
            }

            public BRScript.ControlOptionStatement GetDisableModifier()
            {
                if (modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in modifiers)
                    {
                        if (modifier.token.type == BRScanner.TokenType.DISABLE_OPTION)
                        {
                            return modifier;
                        }
                    }
                }
                return null;
            }

            public BRScript.ControlOptionStatement GetRewardModifier()
            {
                if (modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in modifiers)
                    {
                        if (modifier.token.type == BRScanner.TokenType.REWARD_OPTION)
                        {
                            return modifier;
                        }
                    }
                }
                return null;
            }

            public BRScript.ControlOptionStatement GetHoverModifier()
            {
                if (modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in modifiers)
                    {
                        if (modifier.token.type == BRScanner.TokenType.HOVER_OPTION)
                        {
                            return modifier;
                        }
                    }
                }
                return null;
            }
            
            public BRScript.ControlOptionStatement GetRoleModifier()
            {
                if (modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in modifiers)
                    {
                        if (modifier.token.type == BRScanner.TokenType.ROLE)
                        {
                            return modifier;
                        }
                    }
                }
                return null;
            }
        }

        public class StringWithVariables
        {
            public struct StringParam
            {
                public string formatSpecifier;
                public string identifier;
            }

            private StringBuilder _curSB = new StringBuilder();
            private StringBuilder _resultSB = new StringBuilder();

            private string[] _specialIdentifiers = new string[] { "you", "them", "player" };

            public List<StringParam> stringParams = new List<StringParam>();

            public string Parse(string input, bool varNames = true)
            {
                _resultSB.Length = 0;
                stringParams.Clear();
                int pos = 0;
                int len = input.Length;
                while (pos < len)
                {
                    char c = input[pos];
                    if (c == '%')
                    {
                        string formatSpecifier = string.Empty;
                        string identifier = string.Empty;

                        if ((pos + 1 < len) && (input[pos+1] == '('))
                        {
                            // Parse an embedded variable
                            pos += 2;
                            _curSB.Length = 0;
                            while (pos < len && input[pos] != ')' && input[pos] != ',')
                            {
                                _curSB.Append(input[pos]);
                                pos++;
                            }
                            identifier = _curSB.ToString().Trim();
                            if (identifier.Length > 0 && identifier[0] >= 'A' && identifier[0] <= 'Z')
                            {
                                identifier = "fact." + identifier;
                            }
                            if (pos < len && input[pos] == ',')
                            {
                                if (input[pos] == ',')
                                {
                                    pos++;
                                }
                                _curSB.Length = 0;
                                while (pos < len && input[pos] != ')')
                                {
                                    _curSB.Append(input[pos]);
                                    pos++;
                                }
                                formatSpecifier = _curSB.ToString().Trim();
                            }

                            // Special identifiers don't require a parameter to be passed explicitly
                            bool foundSpecialIdentifier = false;
                            if (identifier.StartsWith("@", StringComparison.Ordinal))
                            {
                                _resultSB.Append("{").Append(identifier);
                                if (!string.IsNullOrEmpty(formatSpecifier))
                                {
                                    foundSpecialIdentifier = true;
                                    _resultSB.Append(":").Append(formatSpecifier).Append("}");
                                }
                            }
                            else
                            {
                                foreach (string specialIdentifier in _specialIdentifiers)
                                {
                                    if (string.Compare(identifier, specialIdentifier, StringComparison.OrdinalIgnoreCase) == 0)
                                    {
                                        _resultSB.Append("{").Append(specialIdentifier);
                                        if (!string.IsNullOrEmpty(formatSpecifier))
                                        {
                                            foundSpecialIdentifier = true;
                                            _resultSB.Append(":").Append(formatSpecifier).Append("}");
                                            break;
                                        }
                                    }
                                }
                            }

                            if (!foundSpecialIdentifier)
                            {
                                // Collapse multiple references to the same object to a single parameter
                                int paramIndex = -1;
                                for (int i = 0; i < stringParams.Count; i++)
                                {
                                    if (stringParams[i].identifier == identifier)
                                    {
                                        paramIndex = i;
                                    }
                                }

                                if (paramIndex == -1)
                                {
                                    StringParam newParam = new StringParam
                                    {
                                        identifier = identifier,
                                        formatSpecifier = formatSpecifier,
                                    };

                                    stringParams.Add(newParam);
                                    paramIndex = stringParams.Count - 1;
                                }

                                _resultSB.Append("{").Append(paramIndex);
                                if (!string.IsNullOrEmpty(formatSpecifier))
                                {
                                    _resultSB.Append(":").Append(formatSpecifier);
                                }
                                _resultSB.Append("}");
                            }
                        }
                        else
                        {
                            _resultSB.Append('%');
                        }
                    }
                    else
                    {
                        _resultSB.Append(c);
                    }
                    pos++;
                }

                return _resultSB.ToString();
            }
        }

        public string Output { get { return _output; } }

        private StringBuilder IndentLine(StringBuilder sb)
        {
            for (int i = 0; i < _curIndentLevel; ++i)
            {
                sb.Append("    ");
            }
            return sb;
        }

        private string TranspileIdentifier(string identifier)
        {
            if (identifier == null)
            {
                return "nil";
            }
            if (identifier[0] >= 'A' && identifier[0] <= 'Z')
            {
                return "fact." + identifier;
            }
            return identifier;
        }

        private string TranspileLiteral(object literal)
        {
            if (literal == null)
            {
                return "nil";
            }
            else if (literal.GetType() == typeof(bool))
            {
                bool v = (bool)literal;
                return v ? "true" : "false";
            }
            else if (literal.GetType() == typeof(string))
            {
                return TranspileString((string)literal);
            }
            else
            {
                return literal.ToString();
            }
        }

        private string TranspileDurationType(BRScanner.TokenType durationType)
        {
            switch(durationType)
            {
                case BRScanner.TokenType.TICKS:
                    return "\"ticks\"";
                case BRScanner.TokenType.DAYS:
                    return "\"days\"";
                case BRScanner.TokenType.MONTHS:
                    return "\"months\"";
                default:
                    return "unknownDurationType";
            }
        }

        private BRScript.BRException NewBRException(string message)
        {
            throw new BRScript.BRException(message);
        }

        private string GetQuoteName(string label)
        {
            if (label.StartsWith("Lua."))
            {
                return "BRLuaCall:" + label.Substring(4);
            }
            else
            {
                if (_scriptPrefix == null || _scriptPrefix.Length == 0)
                {
                    return "Quote_" + label;
                }
                else
                {
                    return "Quote_" + _scriptPrefix + "_" + label;
                }
            }
        }

        private string TranspileString(string s)
        {
            _textSB.Length = 0;
            _textSB.Append('"').Append(s).Replace("\n", "\\n").Replace("\t", "\\t").Append('"');
            return _textSB.ToString();
        }

        private string TranspileTextSection(string textSection)
        {
            _textSB.Length = 0;
            _textSB.Append(textSection).Replace("\n", "\\n").Replace("\t", "\\t");
            return _textSB.ToString();
        }

        private bool ScriptTypeIsSitdown()
        {
            return _scriptType.Equals("SITDOWN");
        }

        private bool ScriptTypeIsInteraction()
        {
            return _scriptType.Equals("INTERACTION");
        }

        private string GetCategory(string source)
        {
            string category = string.Empty;
            if (source.StartsWith("--$$"))
            {
                for (int index = 4; index < source.Length; index++)
                {
                    char c = source.Substring(index, 1)[0];

                    // Ignore leading spaces
                    if (string.IsNullOrEmpty(category) && c == ' ')
                    {
                        continue;
                    }

                    if (!char.IsLetterOrDigit(c))
                    {
                        break;
                    }

                    category += c;
                }
            }

            return string.IsNullOrEmpty(category) ? "Conversation" : category;
        }

        public BRTranspiler()
        {
            _parser = new BRParser();
            _scanner = new BRScanner();
            _sb = new StringBuilder();
            _textSB = new StringBuilder();
            _handleResultsSB = new StringBuilder();
            _blockSay = new BlockSay();
            _blockOptions = new BlockOptions();
            _scriptVariables = new List<string>();
            _varString = new StringWithVariables();
            _curSB = _sb;
            _curIndentLevel = 0;
        }

        public void Clear()
        {
            _output = null;
            _parser.Clear();
            _scanner.Clear();
            _sb.Length = 0;
            _handleResultsSB.Length = 0;
            _scriptVariables.Clear();
            _blockSay.Clear();
            _blockOptions.Clear();
            _curSB = _sb;
            _curIndentLevel = 0;
        }

        public bool Transpile(string source)
        {
            Clear();

            _sb.AppendFormat("--$$ {0}\n", GetCategory(source));

            try
            {
                if (!_scanner.ScanTokens(source))
                {
                    string txt = "";
                    foreach(BRScanner.ScannerError e in _scanner.Errors)
                    {
                        txt += " line ("+ e.location.line + ", char " + e.location.offset + ") " + e.message + "\n";
                    }
                    return false;
                }
                _parser.Parse(_scanner.Tokens).Accept(this);
                _output = _sb.ToString();
                return true;
            }
            catch (Exception e)
            {
                _output = e.ToString();
                return false;
            }
        }

        public void Visit(BRScript.Script script)
        {
            _sb.AppendLine(Header);
            if (script.startQuoteBlock != null)
            {
                script.startQuoteBlock.Accept(this);
            }
            if (script.quoteBlocks != null)
            {
                foreach(BRScript.QuoteBlock quoteBlock in script.quoteBlocks)
                {
                    quoteBlock.Accept(this);
                }
            }
            if (script.functionBlocks != null)
            {
                foreach(BRScript.FunctionBlock functionBlock in script.functionBlocks)
                {
                    functionBlock.Accept(this);
                }
            }
        }

        public void Visit(BRScript.RemStatement remStatement)
        {
            if (!string.IsNullOrEmpty(remStatement.comment))
            {
                _sb.AppendLine($"--$== {remStatement.comment.Trim()}");
            }
        }

        public void Visit(BRScript.StartQuoteBlock startQuoteBlock)
        {
            _blockName = "onStart";
            _resultsBlockName = "onStartResults";
            _scriptId = startQuoteBlock.scriptId;
            _scriptType = startQuoteBlock.scriptType;
            _scriptPrefix = startQuoteBlock.scriptPrefix;
            if (_scriptPrefix == null)
            {
                _scriptPrefix = "";
            }

            if (startQuoteBlock.remStatements != null)
            {
                foreach (BRScript.RemStatement remStatement in startQuoteBlock.remStatements)
                {
                    remStatement.Accept(this);
                }
                _sb.AppendLine();
            }

            _sb.Append("_namespace = \"CONVERSATIONS\"\n");
            _sb.Append("_id = \"").Append(_scriptId).AppendLine("\"").AppendLine();

            if (startQuoteBlock.makeStringStatements != null)
            {
                for (int i = 0; i < startQuoteBlock.makeStringStatements.Count; i++)
                {
                    startQuoteBlock.makeStringStatements[i].Accept(this);
                }
                _sb.AppendLine();
            }

            if (startQuoteBlock.varStatements != null)
            {
                for (int i = 0; i < startQuoteBlock.varStatements.Count; i++)
                {
                    startQuoteBlock.varStatements[i].Accept(this);
                }
            }

            if (startQuoteBlock.ruleStatements != null)
            {
                _sb.AppendLine("MatchingRules =").AppendLine("{");
                _curIndentLevel++;
                for (int i = 0; i < startQuoteBlock.ruleStatements.Count; i++)
                {
                    startQuoteBlock.ruleStatements[i].Accept(this);
                }
                _curIndentLevel--;
                _sb.AppendLine("}").AppendLine();
            }

            if (startQuoteBlock.luaSection != null)
            {
                startQuoteBlock.luaSection.Accept(this);
                _sb.AppendLine();
            }
            _sb.AppendLine("function onStart()");
            if (_debug)
            {
                IndentLine(_sb).AppendLine(@"print(""onStart"")");
            }
            // if (ScriptTypeIsInteraction())
            // {
            //     _curIndentLevel++;
            //     IndentLine(_sb).AppendLine("Utils:getWorldAudio().startInteraction(thisActor)");
            //     _curIndentLevel--;
            // }
            if (startQuoteBlock.quoteBlockStatements != null)
            {
                _curIndentLevel++;
                startQuoteBlock.quoteBlockStatements.Accept(this);
                _curIndentLevel--;
            }
            IndentLine(_sb).AppendLine("end").AppendLine();
            if (_handleResultsSB.Length > 0)
            {
                IndentLine(_sb).Append("function ").Append(_resultsBlockName).AppendLine("(optionResult)");
                if (_debug)
                {
                    IndentLine(_sb).Append(@"print(""").Append(_resultsBlockName).AppendLine("\")");
                }
                _sb.Append(_handleResultsSB.ToString());
                IndentLine(_sb).AppendLine("end").AppendLine();
            }
        }

        public void Visit(BRScript.FunctionBlock functionBlock)
        {
            _blockName = functionBlock.functionLabel;
            _sb.Append("function ").Append(_blockName).Append("(");
            for(int i = 0; i < functionBlock.functionArguments.Count; i++)
            {
                _sb.Append(functionBlock.functionArguments[i]);
                if(i < functionBlock.functionArguments.Count - 1)
                {
                    _sb.Append(", ");
                }
            }
            _sb.AppendLine(")");
            if (_debug)
            {
                IndentLine(_sb).Append(@"print(""").Append(_blockName).AppendLine("\")");
            }
            if (functionBlock.functionStatements != null)
            {
                _curIndentLevel++;
                for(int i = 0; i < functionBlock.functionStatements.Count; i++)
                {
                    functionBlock.functionStatements[i].Accept(this);
                }
                _curIndentLevel--;
            }
            IndentLine(_sb).AppendLine("end").AppendLine();
        }

        public void Visit(BRScript.QuoteBlock quoteBlock)
        {
            string label = quoteBlock.quoteLabel;
            _blockName = GetQuoteName(label);
            _resultsBlockName = _blockName + "Results";
            _sb.Append("function ").Append(_blockName).AppendLine("()");
            if (_debug)
            {
                IndentLine(_sb).Append(@"print(""").Append(_blockName).AppendLine("\")");
            }
            bool hasResultsFunction = true;
            if (quoteBlock.quoteBlockStatements != null)
            {
                _curIndentLevel++;
                quoteBlock.quoteBlockStatements.Accept(this);
                if (quoteBlock.quoteBlockStatements.dialogueStatements != null &&
                    quoteBlock.quoteBlockStatements.dialogueStatements.sayStatement != null &&
                    quoteBlock.quoteBlockStatements.dialogueStatements.optionStatements == null)
                {
                    hasResultsFunction = false;
                }
                _curIndentLevel--;
            }
            if (hasResultsFunction)
            {
                IndentLine(_sb).AppendLine("end").AppendLine();
            }
            if (_handleResultsSB.Length > 0)
            {
                if (hasResultsFunction)
                {
                    _sb.Append("function ").Append(_resultsBlockName).AppendLine("(optionResult)");
                    if (_debug)
                    {
                        IndentLine(_sb).Append(@"print(""").Append(_resultsBlockName).AppendLine("\")");
                    }
                }
                _sb.Append(_handleResultsSB.ToString());
                if (hasResultsFunction)
                {
                    IndentLine(_sb).AppendLine("end").AppendLine();
                }
            }
            if (!hasResultsFunction)
            {
                IndentLine(_sb).AppendLine("end").AppendLine();
            }
        }

        public void ParseRewardOption(BRScript.ControlOptionStatement reward, int blockId)
        {
            if(reward.text != null)
            {
                string localizationId =  "$" + _scriptId + "_" + _blockName + "_option" + blockId + "_reward";
                string parsedVal = _varString.Parse(reward.text);
                if (_varString.stringParams.Count == 0)
                {
                    IndentLine(_curSB).Append("-- \"").Append(localizationId).Append("\"");
                    reward.text = "\"" + localizationId + "\"";
                }
                else
                {
                    StringBuilder tempSB = new StringBuilder();
                    IndentLine(_curSB).Append("-- ");
                    tempSB.Append("{\"").Append(localizationId).Append("\"");
                    for (int i = 0; i < _varString.stringParams.Count; i++)
                    {
                        tempSB.Append(", ").Append( _varString.stringParams[i].identifier.Trim());
                    }
                    tempSB.Append("}");

                    _curSB.Append(tempSB);
                    reward.text = tempSB.ToString();
                }
                _curSB.Append(" --$ ").AppendLine(TranspileTextSection(parsedVal));
            }
        }

        public void Visit(BRScript.QuoteBlockStatements quoteBlockStatements)
        {
            _blockOptions.Clear();
            _blockSay.Clear();
            _handleResultsSB.Length = 0;
            _curSB = _sb;
            if (quoteBlockStatements.predialogueStatements != null)
            {
                foreach(BRScript.Stmt stmt in quoteBlockStatements.predialogueStatements)
                {
                    stmt.Accept(this);
                }
            }
            if (quoteBlockStatements.dialogueStatements != null)
            {
                quoteBlockStatements.dialogueStatements.Accept(this);
            }
            if (quoteBlockStatements.handleResultsStatements != null)
            {
                _curSB = _handleResultsSB;
                foreach(BRScript.Stmt stmt in quoteBlockStatements.handleResultsStatements)
                {
                    stmt.Accept(this);
                }
                _curSB = _sb;
            }
            if(_blockSay != null && _blockSay.say != null)
            {
                string localizationId =  "$" + _scriptId + "_" + _blockName + "_say";
                string parsedVal = _varString.Parse(_blockSay.say.text);
                if (_varString.stringParams.Count == 0)
                {
                    IndentLine(_curSB).Append("say(\"").Append(localizationId).Append("\"");
                }
                else
                {
                    IndentLine(_curSB).Append("say({\"").Append(localizationId).Append("\"");
                    for (int i = 0; i < _varString.stringParams.Count; i++)
                    {
                        _curSB.Append(", ").Append( _varString.stringParams[i].identifier.Trim());
                    }
                    _curSB.Append("}");
                }
                if(_blockSay.modifier != null)
                {
                    _curSB.Append(", \"" + _blockSay.modifier.text + "\"");
                }
                _curSB.Append(") --$ ").AppendLine(TranspileTextSection(parsedVal));
            }
            foreach(BlockOption blockOption in _blockOptions.options)
            {
                string localizationId =  "$" + _scriptId + "_" + _blockName + "_option" + blockOption.id;
                BRScript.ControlOptionStatement hideModifier = blockOption.GetHideModifier();
                BRScript.ControlOptionStatement disableModifier = blockOption.GetDisableModifier();
                BRScript.ControlOptionStatement hoverModifier = blockOption.GetHoverModifier();
                BRScript.ControlOptionStatement rewardModifier = blockOption.GetRewardModifier();
                BRScript.ControlOptionStatement roleModifier = blockOption.GetRoleModifier();
                if (hideModifier != null)
                {
                    IndentLine(_curSB).Append("if not ");
                    if (hideModifier.ifExpression != null)
                    {
                        hideModifier.ifExpression.expression.Accept(this);
                    }
                    else
                    {
                        _curSB.Append("true");
                    }
                    _curSB.AppendLine(" then");
                    _curIndentLevel++;
                }

                if (rewardModifier != null)
                {
                    ParseRewardOption(rewardModifier, blockOption.id);
                }

                string parsedVal = _varString.Parse(blockOption.text);
                if (_varString.stringParams.Count == 0)
                {
                    IndentLine(_curSB).Append("option(\"").Append(localizationId).Append("\"");
                }
                else
                {
                    IndentLine(_curSB).Append("option({\"").Append(localizationId).Append("\"");
                    for (int i = 0; i < _varString.stringParams.Count; i++)
                    {
                        _curSB.Append(", ").Append( _varString.stringParams[i].identifier.Trim());
                    }
                    _curSB.Append("}");
                }
                _curSB.Append(", ").Append("{").Append(_resultsBlockName);
                _curSB.Append(", \"option").Append(blockOption.id).Append("\"}");
                if (disableModifier == null)
                {
                    _curSB.Append(", nil");
                }
                else
                {
                    _curSB.Append(", ");
                    if (disableModifier.ifExpression != null)
                    {
                        _curSB.Append(" not ");
                        disableModifier.ifExpression.expression.Accept(this);
                    }
                    else
                    {
                        _curSB.Append("true");
                    }
                }
                if (hoverModifier == null)
                {
                    _curSB.Append(", nil");
                }
                else
                {
                    _curSB.Append(", \"" + hoverModifier.text + "\"");
                }
                if (rewardModifier == null)
                {
                    _curSB.Append(", nil");
                }
                else
                {
                    _curSB.Append(", " + rewardModifier.text);
                }
                if (roleModifier == null)
                {
                    _curSB.Append(", nil");
                }
                else
                {
                    _curSB.Append(", \"" + roleModifier.text + "\"");
                }
                _curSB.Append(") --$ ").AppendLine(TranspileTextSection(parsedVal));
                if (blockOption.modifiers != null)
                {
                    foreach(BRScript.ControlOptionStatement modifier in blockOption.modifiers)
                    {
                        switch(modifier.token.type)
                        {
                            case BRScanner.TokenType.TONE_OPTION:
                            case BRScanner.TokenType.SUCCESS_CHANCE_OPTION:
                            case BRScanner.TokenType.TOOLTIP_OPTION:
                                if (modifier.ifExpression != null)
                                {
                                    IndentLine(_curSB).Append("if ");
                                    modifier.ifExpression.expression.Accept(this);
                                    _curSB.AppendLine(" then");
                                    _curIndentLevel++;
                                }
                                if (modifier.token.type == BRScanner.TokenType.TONE_OPTION)
                                {
                                    IndentLine(_curSB).Append("tone");
                                }
                                else if (modifier.token.type == BRScanner.TokenType.SUCCESS_CHANCE_OPTION)
                                {
                                    IndentLine(_curSB).Append("successChance");
                                }
                                else if (modifier.token.type == BRScanner.TokenType.TOOLTIP_OPTION)
                                {
                                    IndentLine(_curSB).Append("tooltip");
                                }
                                modifier.argList.Accept(this);
                                _curSB.AppendLine("");
                                if (modifier.ifExpression != null)
                                {
                                    _curIndentLevel--;
                                    IndentLine(_curSB).AppendLine("end");
                                }
                                break;
                        }
                    }
                }
                if (hideModifier != null)
                {
                    _curIndentLevel--;
                    IndentLine(_curSB).AppendLine("end");
                }
            }
        }

        public void Visit(BRScript.ControlSayStatement controlSayStatement)
        {
            _blockSay.modifier = controlSayStatement;
        }

        public void Visit(BRScript.DialogueStatements dialogueStatements)
        {
            if (dialogueStatements.sayStatement != null)
            {
                dialogueStatements.sayStatement.Accept(this);
            }
            if (dialogueStatements.controlSayStatement != null)
            {
                dialogueStatements.controlSayStatement.Accept(this);
            }
            if (dialogueStatements.optionStatements != null)
            {
                foreach(BRScript.OptionStatement stmt in dialogueStatements.optionStatements)
                {
                    stmt.Accept(this);
                }
            }
            if (dialogueStatements.controlOptionStatements != null)
            {
                foreach(BRScript.ControlOptionStatement stmt in dialogueStatements.controlOptionStatements)
                {
                    stmt.Accept(this);
                }
            }
        }

        public void Visit(BRScript.VarStatement varStatement)
        {
            IndentLine(_curSB).Append(varStatement.identifier);
            _curSB.Append(" = ");

            if (varStatement.stringText != null)
            {
                string stringDef = _varString.Parse(varStatement.stringText, false);
                stringDef = "\"$" + _scriptId + "_" + varStatement.identifier + "\"        --$ " + TranspileTextSection(stringDef);
                _curSB.Append(stringDef);
            }
            else if (varStatement.initialExpr != null)
            {
                varStatement.initialExpr.Accept(this);
            }
            else
            {
                _curSB.Append("nil");
            }
            _curSB.AppendLine();
        }

        public void Visit(BRScript.RuleStatement ruleStatement)
        {
            IndentLine(_curSB).Append("function() return (");
            ruleStatement.expr.Accept(this);
            _curSB.AppendLine(") end,");
        }

        public void Visit(BRScript.TitleStatement titleStatement)
        {
            if(titleStatement.text != null)
            {
                string localizationId =  "$" + _scriptId + "_" + _blockName + "_title";
                string parsedVal = _varString.Parse(titleStatement.text);
                if (_varString.stringParams.Count == 0)
                {
                    IndentLine(_curSB).Append("title(\"").Append(localizationId).Append("\"");
                }
                else
                {
                    IndentLine(_curSB).Append("title({\"").Append(localizationId).Append("\"");
                    for (int i = 0; i < _varString.stringParams.Count; i++)
                    {
                        _curSB.Append(", ").Append( _varString.stringParams[i].identifier.Trim());
                    }
                    _curSB.Append("}");
                }
                _curSB.Append(") --$ ").AppendLine(TranspileTextSection(parsedVal));
            }
        }

        public void Visit(BRScript.SayStatement sayStatement)
        {
            _blockSay.Clear();
            _blockSay.say = sayStatement;
        }

        public void Visit(BRScript.LocalStatement localStatement)
        {
            IndentLine(_curSB).Append("local ").Append(localStatement.identifier);
            if (localStatement.initialExpr != null)
            {
                _curSB.Append(" = ");
                localStatement.initialExpr.Accept(this);
            }
            _curSB.AppendLine();
        }

        public void Visit(BRScript.CallStatement callStatement)
        {
            IndentLine(_curSB).Append(GetQuoteName(callStatement.label)).AppendLine("()");
        }

        public void Visit(BRScript.IfStatement ifStatement)
        {
            IndentLine(_curSB).Append("if ");
            ifStatement.condition.Accept(this);
            _curSB.AppendLine(" then");
            if (ifStatement.ifStatements != null)
            {
                for (int i = 0; i < ifStatement.ifStatements.Count; i++)
                {
                    _curIndentLevel++;
                    ifStatement.ifStatements[i].Accept(this);
                    _curIndentLevel--;
                }
            }
            if (ifStatement.elseIfBlocks != null)
            {
                for (int i = 0; i < ifStatement.elseIfBlocks.Count; i++)
                {
                    IndentLine(_curSB).Append("elseif ");
                    _curIndentLevel++;
                    ifStatement.elseIfBlocks[i].condition.Accept(this);
                    _curIndentLevel--;
                    _curSB.AppendLine(" then");
                    List<BRScript.Stmt> elseIfStatements = ifStatement.elseIfBlocks[i].statements;
                    if (elseIfStatements != null)
                    {
                        for (int j = 0; j < elseIfStatements.Count; j++)
                        {
                            _curIndentLevel++;
                            elseIfStatements[j].Accept(this);
                            _curIndentLevel--;
                        }
                    }
                }
            }
            if (ifStatement.elseStatements != null)
            {
                IndentLine(_curSB).AppendLine("else");
                for (int i = 0; i < ifStatement.elseStatements.Count; i++)
                {
                    _curIndentLevel++;
                    ifStatement.elseStatements[i].Accept(this);
                    _curIndentLevel--;
                }
            }
            IndentLine(_curSB).AppendLine("end");
        }

        public void Visit(BRScript.PostFixIfStatement ifStatement)
        {
            IndentLine(_curSB).Append("if ");
            _curIndentLevel++;
            ifStatement.condition.Accept(this);
            _curIndentLevel--;
            _curSB.AppendLine(" then");
            _curIndentLevel++;
            ifStatement.statement.Accept(this);
            _curIndentLevel--;
            IndentLine(_curSB).AppendLine("end");
        }

        public void Visit(BRScript.OptionStatement optionStatement)
        {
            if (optionStatement.timeOut != null)
            {
                _blockOptions.hasTimeOut = true;
                IndentLine(_curSB).Append("timeout(");
                optionStatement.timeOut.Accept(this);
                _sb.Append(", {").Append(_resultsBlockName).AppendLine(", \"timeout\"})");
            }
            else
            {
                BlockOption newOption = new BlockOption();
                newOption.id = optionStatement.option;
                newOption.text = optionStatement.text;
                _blockOptions.options.Add(newOption);
            }
        }

        public void Visit(BRScript.ControlOptionStatement controlOptionStatement)
        {
            BlockOption option = _blockOptions.GetBlockOption(controlOptionStatement.option);
            if (option.modifiers == null)
            {
                option.modifiers = new List<BRScript.ControlOptionStatement>();
            }
            option.modifiers.Add(controlOptionStatement);
        }

        public void Visit(BRScript.LuaSection luaSection)
        {
            _curSB.AppendLine().AppendLine(luaSection.lua);
        }

        public void Visit(BRScript.MakeStringStatement makeStringStatement)
        {
            string comment = _varString.Parse(makeStringStatement.text, false);
            comment = "-- \"$" + makeStringStatement.identifier + "\"        --$ " + TranspileTextSection(comment);
            _curSB.AppendLine(comment);
        }

        public void Visit(BRScript.StringCommandExpr stringCommandStatement)
        {
            BRScript.VariableExpr varExpr = (BRScript.VariableExpr)(stringCommandStatement.argList.args[0]);

            if (stringCommandStatement.argList.args.Count > 1)
            {
                _curSB.Append("{").Append(TranspileString("$" + varExpr.identifier));
                for (int i = 1; i < stringCommandStatement.argList.args.Count; i++)
                {
                    BRScript.Expr arg = stringCommandStatement.argList.args[i];
                    _curSB.Append(", ");
                    arg.Accept(this);
                }
                _curSB.Append("}");
            }
            else
            {
                _curSB.Append(TranspileString("$" + varExpr.identifier));
            }
        }

        public void Visit(BRScript.GotoStatement gotoStatement)
        {
            if (gotoStatement.scriptId != null)
            {
                IndentLine(_curSB).Append("callConversation(")
                    .Append(TranspileString(gotoStatement.scriptId)).Append(", ")
                    .Append(TranspileString(GetQuoteName(gotoStatement.label))).AppendLine(")");
            }
            else if (gotoStatement.entryId != null)
            {
                IndentLine(_curSB).Append("callConversationEntry(")
                    .Append(TranspileString(gotoStatement.entryId)).AppendLine(")");
            }
            else
            {
                IndentLine(_curSB).Append("return ").Append(GetQuoteName(gotoStatement.label)).AppendLine("()");
            }
        }

        public void Visit(BRScript.SetStatement setStatement)
        {
            IndentLine(_curSB).Append(TranspileIdentifier(setStatement.identifier)).Append(" = ");
            setStatement.expression.Accept(this);
            _curSB.AppendLine();
        }

        public void Visit(BRScript.CustomStatement customStatement)
        {
            IndentLine(_curSB).Append("BRScript:").Append(customStatement.identifier);
            if (customStatement.argList == null)
            {
                _curSB.Append("()");
            }
            else
            {
               customStatement.argList.Accept(this);
            }
            _curSB.AppendLine();
        }

        public void Visit(BRScript.TriggerStatement triggerStatement)
        {
            // Todo: ensure parser throws error if args are missing
            IndentLine(_curSB).Append("WorldUtils:scheduleWithDelay(");
            triggerStatement.argList.args[0].Accept(this);
            _curSB.Append(", ");
            if (triggerStatement.duration == null)
            {
                _curSB.Append("0, nil");
            }
            else
            {
                triggerStatement.duration.Accept(this);
                _curSB.Append(", ").Append(TranspileDurationType(triggerStatement.durationType));
            }
            for (int i = 1; i < triggerStatement.argList.args.Count; i++)
            {
                _curSB.Append(", ");
                triggerStatement.argList.args[i].Accept(this);
            }
            _curSB.AppendLine(")");
        }

        public void Visit(BRScript.ArgList argList)
        {
            _curSB.Append("(");
            bool first = true;
            if (argList.args != null)
            {
                foreach(BRScript.Expr expr in argList.args)
                {
                    if (first)
                    {
                        first = false;
                    }
                    else
                    {
                        _curSB.Append(", ");
                    }
                    expr.Accept(this);
                }
            }
            _curSB.Append(")");
        }

        public void Visit(BRScript.CallLuaExpr callLuaExpression)
        {
            _curSB.Append(callLuaExpression.lua);
        }

        public void Visit(BRScript.UnaryExpr unaryExpression)
        {
            switch (unaryExpression.op.type)
            {
                case BRScanner.TokenType.NOT:
                    _curSB.Append(" not ");
                   break;
                case BRScanner.TokenType.MINUS:
                    _curSB.Append(" -");
                    break;
                case BRScanner.TokenType.PLUS:
                    _curSB.Append(" +");
                    break;
            }
            unaryExpression.arg.Accept(this);
        }

        public void Visit(BRScript.BinaryExpr binaryExpression)
        {
            _curSB.Append("(");
            binaryExpression.arg1.Accept(this);
            switch (binaryExpression.op.type)
            {
                case BRScanner.TokenType.PLUS:
                    _curSB.Append(" + ");
                    break;
                case BRScanner.TokenType.MINUS:
                    _curSB.Append(" - ");
                    break;
                case BRScanner.TokenType.STAR:
                    _curSB.Append(" * ");
                    break;
                case BRScanner.TokenType.SLASH:
                    _curSB.Append(" / ");
                    break;
                case BRScanner.TokenType.OR:
                    _curSB.Append(" or ");
                    break;
                case BRScanner.TokenType.AND:
                    _curSB.Append(" and ");
                    break;
                case BRScanner.TokenType.LT:
                    _curSB.Append(" < ");
                    break;
                case BRScanner.TokenType.LE:
                    _curSB.Append(" <= ");
                    break;
                case BRScanner.TokenType.GT:
                    _curSB.Append(" > ");
                    break;
                case BRScanner.TokenType.GE:
                    _curSB.Append(" >= ");
                    break;
                case BRScanner.TokenType.EQ:
                    _curSB.Append(" == ");
                    break;
                case BRScanner.TokenType.NE:
                    _curSB.Append(" ~= ");
                    break;
            }
            binaryExpression.arg2.Accept(this);
            _curSB.Append(")");
        }

        public void Visit(BRScript.LiteralExpr literalExpression)
        {
            if (literalExpression.literal == null)
            {
                _curSB.Append("nil");
            }
            else
            {
                _curSB.Append(TranspileLiteral(literalExpression.literal));
            }
        }

        public void Visit(BRScript.VariableExpr variableExpression)
        {
            _curSB.Append(TranspileIdentifier(variableExpression.identifier));
        }

        public void Visit(BRScript.OptionExpr optionExpression)
        {
            _curSB.Append("(optionResult == \"option").Append(optionExpression.option).Append("\")");
        }

        public void Visit(BRScript.TokenExpr tokenExpression)
        {
            _curSB.Append("(optionResult == \"timeout\")");
        }

        public void Visit(BRScript.CallExpr callExpression)
        {
            _curSB.Append("BRScript:").Append(callExpression.identifier);
            callExpression.argList.Accept(this);
        }

        public void Visit(BRScript.IfExpression ifExpression)
        {
            // Not handled here - is handled higher in the tree
        }
    }
}
